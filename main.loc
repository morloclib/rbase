module rbase (*)

type R Int = "integer"
type R Real = "numeric"
type R Str = "character"
type R Bool = "logical"
type R (List a) = "list" a
type R (Tuple2 a b) = "tuple" a b
type R (Tuple3 a b c) = "tuple" a b c
type R (Tuple4 a b c d) = "tuple" a b c d
type R (Tuple5 a b c d e) = "tuple" a b c d e

-- Import and source conventions
import conventions
source R from "R/core.R"
 ( "mlc_run"           as run
 , "mlc_id"            as id
 , "mlc_at"            as at
 , "mlc_map"           as map
 , "mlc_zipWith"       as zipWith
 , "mlc_fold"          as fold
 , "mlc_enumerateWith" as enumerateWith
 , "mlc_add"           as add
 , "mlc_sub"           as sub
 , "mlc_mul"           as mul
 , "mlc_div"           as div
 , "mlc_neg"           as neg
 -- tuples
 , "mlc_fst" as fst
 , "mlc_snd" as snd
 , "mlc_fst" as fst3 -- same as fst in R
 , "mlc_snd" as snd3 -- same as snd in R
 , "mlc_thr" as thr3 -- same as thr in R
 -- comparators
 , "mlc_gt" as gt
 , "mlc_lt" as lt
 , "mlc_ge" as ge
 , "mlc_le" as le
 , "mlc_eq" as eq
 , "mlc_ne" as ne
 , "mlc_not" as not
 , "mlc_and" as and
 , "mlc_or" as or
 )

source R
 ( "length" as length
 , "nchar" as lengthS
 )


-------------------------------------------------------------------------------
-- exports from base R
source R
 ( "sum"
 , "as.numeric" as ints2reals
 )

sum :: [Real] -> Real

-- casting functions - these are all incorrectly typed. Not all values can be
-- cast into any of these types. Sound resolution of this problem will have to
-- await the addition of typeclasses.
ints2reals :: [Int] -> [Real]

source R from "R/core.R" ("mlc_plotVectorPDF" as plotVectorPDF)
plotVectorPDF :: [Real] -> Str -> ()
plotVectorPDF R :: [Real] -> Str -> ()
-------------------------------------------------------------------------------



-------------------------------------------------------------------------------
--                 Pack and Unpack internal functions                          
-- These functions are used by morloc internally for (de)serialization of types
-- that cannot be automatically (de)serialized into/from JSON. They should not
-- be exported.
-------------------------------------------------------------------------------

-- WARNING: The Map implementation in R is total crap. R doesn't have a general
-- map type, at least not in base. The `list` type works properly only for
-- string keys. So the Map type here is mostly just for testing purposes.
source R from "data.R"
 ( "morloc_packMap" as packMap
 , "morloc_unpackMap" as unpackMap
 )

type R (Map key val) = "list" key val

-- These do not need to be exported (and indeed should not be)
packMap :: pack => ([key],[val]) -> Map key val
packMap R :: pack => ([key],[val]) -> "list" key val

unpackMap :: unpack => Map key val -> ([key],[val])
unpackMap R :: unpack => "list" key val -> ([key],[val])
