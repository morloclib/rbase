module rbase

import conventions


export Int
export Real
export Str
export Bool

type R Int = "integer"
type R Real = "numeric"
type R Str = "character"
type R Bool = "logical"

source R from "R/core.R"
 ( "mlc_id"            as id
 , "mlc_at"            as at
 , "mlc_map"           as map
 , "mlc_zipWith"       as zipWith
 , "mlc_fold"          as fold
 , "mlc_enumerateWith" as enumerateWith
 , "mlc_add"           as add
 , "mlc_sub"           as sub
 , "mlc_mul"           as mul
 , "mlc_div"           as div
 , "mlc_plotVectorPDF" as plotVectorPDF
 )

export id
export at
export map
export zipWith
export fold
export enumerateWith
export add
export sub
export mul
export div
export plotVectorPDF

-- exports from base R
source R
 ( "sum"
 , "as.numeric" as ints2reals
 )

export sum
export ints2reals

sum :: [Real] -> Real
sum R :: [Real] -> Real

-- casting functions - these are all incorrectly typed. Not all values can be
-- cast into any of these types. Sound resolution of this problem will have to
-- await the addition of typeclasses.
ints2reals :: [Int] -> [Real]
ints2reals R :: ["integer"] -> ["numeric"]

id R :: a -> a

map R :: (a -> b) -> [a] -> [b]

zipWith R :: (a -> b -> c) -> [a] -> [b] -> [c]

fold R :: (b -> a -> b) -> b -> [a] -> b

enumerateWith R :: (a -> Int -> b) -> [a] -> [b]

add R :: Real -> Real -> Real

sub R :: Real -> Real -> Real

mul R :: Real -> Real -> Real

div R :: Real -> Real -> Real

plotVectorPDF :: [Real] -> Str -> ()
plotVectorPDF R :: [Real] -> Str -> ()


-------------------------------------------------------------------------------
--                 Pack and Unpack internal functions                          
-- These functions are used by morloc internally for (de)serialization of types
-- that cannot be automatically (de)serialized into/from JSON. They should not
-- be exported.
-------------------------------------------------------------------------------

-- WARNING: The Map implementation in R is total crap. R doesn't have a general
-- map type, at least not in base. The `list` type works properly only for
-- string keys. So the Map type here is mostly just for testing purposes.
source R from "data.R"
 ( "morloc_packMap" as packMap
 , "morloc_unpackMap" as unpackMap
 )

export Map

type R (Map key val) = "list" key val

-- These do not need to be exported (and indeed should not be)
packMap :: pack => ([key],[val]) -> Map key val
packMap R :: pack => ([key],[val]) -> "list" key val

unpackMap :: unpack => Map key val -> ([key],[val])
unpackMap R :: unpack => "list" key val -> ([key],[val])
